{"ast":null,"code":"var _jsxFileName = \"/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport RevealCells from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s();\n\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('beginner');\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    newBoardGrid[xCoord][yCoord].flagged = true;\n    setBoardGrid(newBoardGrid);\n  };\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    console.log(xCoord, yCoord);\n\n    if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n      alert(\"GAME OVER!\");\n\n      for (let i = 0; i < mineLocation.length; i++) {\n        newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n      }\n\n      setBoardGrid(newBoardGrid);\n    } else {\n      const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n      setBoardGrid(revealedBoard.cells);\n      setNonMineCount(revealedBoard.newSafeCells);\n    }\n  };\n\n  React.useEffect(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    };\n\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [difficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: boardGrid.map(gridRow => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: gridRow.map((gridColumn, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n        cellInfo: gridColumn,\n        flagCell: flagCell,\n        revealCell: revealCell\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameBoard, \"2S6robTmQijOYUQLy5jLevSdWko=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js"],"names":["React","GenerateGameBoard","RevealCells","Cell","GameBoard","boardGrid","setBoardGrid","useState","difficulty","setDifficulty","mineLocation","setMineLocation","nonMineCount","setNonMineCount","flagCell","e","xCoord","yCoord","preventDefault","newBoardGrid","JSON","parse","stringify","flagged","revealCell","console","log","value","alert","i","length","revealed","revealedBoard","cells","newSafeCells","useEffect","gameParams","newGame","board","map","gridRow","gridColumn","idx"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport RevealCells from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport './index.scss';\n\nconst GameBoard = () => {\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('beginner');\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    newBoardGrid[xCoord][yCoord].flagged = true;\n    setBoardGrid(newBoardGrid);\n  }\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    console.log(xCoord, yCoord)\n    if (newBoardGrid[xCoord][yCoord].value === \"X\"){\n        alert(\"GAME OVER!\");\n        for (let i = 0; i < mineLocation.length; i++) {\n          newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n        }\n        setBoardGrid(newBoardGrid);\n    }\n    else {\n      const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n      setBoardGrid(revealedBoard.cells);\n      setNonMineCount(revealedBoard.newSafeCells);\n    }\n  }\n\n  React.useEffect(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    }\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n    \n  }, [difficulty])\n\n  return (\n    <div className=\"board-container\">\n      {boardGrid.map((gridRow) => (\n        <div className=\"board-row\">\n          {gridRow.map((gridColumn, idx) => (\n            <Cell cellInfo={gridColumn} flagCell={flagCell} key={idx} revealCell={revealCell} />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}