{"ast":null,"code":"var _jsxFileName = \"/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport { CountFlags, RevealCells, RevealAdjacentCells } from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport Modal from './Modal';\nimport './index.scss';\nimport NamePrompt from './NamePrompt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s();\n\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [customDifficultyParams, setCustomDifficultyParams] = React.useState([9, 9, 10]);\n  const [difficulty, setDifficulty] = React.useState('beginner');\n  const [inClick, setInClick] = React.useState(false);\n  const [lostGame, setLostGame] = React.useState(false);\n  const [mineFlagsRemaining, setMineFlagsRemaining] = React.useState(0);\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n  const [showModal, setShowModal] = React.useState(false);\n  const [showPrompt, setShowPrompt] = React.useState(false);\n  const [startedGame, setStartedGame] = React.useState(false);\n  const [timer, setTimer] = React.useState(0);\n  const [wonGame, setWonGame] = React.useState(false);\n  const [zoomed, setZoomed] = React.useState(false);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (!newBoardGrid[xCoord][yCoord].revealed) {\n      if (newBoardGrid[xCoord][yCoord].flagged) {\n        newBoardGrid[xCoord][yCoord].flagged = false;\n        setMineFlagsRemaining(mineFlagsRemaining + 1);\n      } else {\n        newBoardGrid[xCoord][yCoord].flagged = true;\n        setMineFlagsRemaining(mineFlagsRemaining - 1);\n      }\n    }\n\n    setBoardGrid(newBoardGrid);\n  };\n\n  const getFace = () => {\n    if (lostGame) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83D\\uDE35\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (wonGame) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83D\\uDE0E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (inClick) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83D\\uDE2E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\uD83D\\uDE42\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  };\n\n  const revealAdjacent = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    setInClick(true);\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (newBoardGrid[xCoord][yCoord].revealed === true) {\n      const flagCount = CountFlags(newBoardGrid, xCoord, yCoord);\n\n      if (flagCount === Number(newBoardGrid[xCoord][yCoord].value)) {\n        const revealedBoard = RevealAdjacentCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n\n        if (revealedBoard.lostGame) {\n          setLostGame(true);\n          newBoardGrid[revealedBoard.losingX][revealedBoard.losingY].isHitMine = true;\n\n          for (let i = 0; i < mineLocation.length; i++) {\n            newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n          }\n        }\n\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n\n    setTimeout(() => setInClick(false), 200);\n  };\n\n  const revealCell = (xCoord, yCoord) => {\n    setInClick(true);\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (!newBoardGrid[xCoord][yCoord].flagged) {\n      if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n        setLostGame(true);\n        newBoardGrid[xCoord][yCoord].isHitMine = true;\n\n        for (let i = 0; i < mineLocation.length; i++) {\n          newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n        }\n\n        setBoardGrid(newBoardGrid);\n      } else {\n        const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n\n    setTimeout(() => setInClick(false), 200);\n  };\n\n  const createBoard = React.useCallback(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'custom':\n          return customDifficultyParams;\n\n        case 'expert':\n          return [16, 30, 99];\n\n        case 'intermediate':\n          return [16, 16, 40];\n\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    };\n\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setWonGame(false);\n    setLostGame(false);\n    setStartedGame(false);\n    setTimer(0);\n    setMineFlagsRemaining(gameParams()[2]);\n    setNonMineCount(gameParams()[0] * gameParams()[1] - gameParams()[2]);\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [customDifficultyParams, difficulty]);\n  React.useEffect(() => {\n    if (nonMineCount === 0) {\n      setWonGame(true);\n    }\n  }, [nonMineCount]);\n  React.useEffect(() => {\n    if (wonGame) {\n      setShowPrompt(true);\n    }\n  }, [wonGame]);\n  React.useEffect(() => {\n    createBoard();\n  }, [createBoard, difficulty]);\n  React.useEffect(() => {\n    const countUp = () => {\n      setTimer(time => time + 0.0175);\n    };\n\n    if (lostGame || wonGame || timer > 998) {\n      clearTimeout(countUp);\n    } else if (startedGame) {\n      setTimeout(countUp, 10);\n    }\n\n    return () => {\n      clearTimeout(countUp);\n    };\n  }, [startedGame, lostGame, timer, wonGame]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `board-wrapper ${zoomed ? 'board-wrapper__zoomed' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"number-display\",\n          children: mineFlagsRemaining >= 0 ? ('000' + mineFlagsRemaining).substr(-3) : '000'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createBoard,\n          children: getFace()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"number-display\",\n          children: ('000' + Math.round(timer)).substr(-3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        onClick: () => setStartedGame(true),\n        children: boardGrid.map((gridRow, gridIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: gridRow.map((gridColumn, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n            cellInfo: gridColumn,\n            flagCell: flagCell,\n            lostGame: lostGame,\n            revealAdjacent: revealAdjacent,\n            revealCell: revealCell\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this))\n        }, gridIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"interaction-button\",\n      onClick: () => setShowModal(true),\n      children: \"Open Menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      close: () => setShowModal(false),\n      difficulty: difficulty,\n      setCustomDifficultyParams: setCustomDifficultyParams,\n      setDifficulty: setDifficulty,\n      setZoomed: setZoomed,\n      visible: showModal,\n      zoomed: zoomed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NamePrompt, {\n      close: () => setShowPrompt(false),\n      show: showPrompt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameBoard, \"q1YN0WRZ64BXxEhqFLkQRqCtSXA=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js"],"names":["React","GenerateGameBoard","CountFlags","RevealCells","RevealAdjacentCells","Cell","Modal","NamePrompt","GameBoard","boardGrid","setBoardGrid","useState","customDifficultyParams","setCustomDifficultyParams","difficulty","setDifficulty","inClick","setInClick","lostGame","setLostGame","mineFlagsRemaining","setMineFlagsRemaining","mineLocation","setMineLocation","nonMineCount","setNonMineCount","showModal","setShowModal","showPrompt","setShowPrompt","startedGame","setStartedGame","timer","setTimer","wonGame","setWonGame","zoomed","setZoomed","flagCell","e","xCoord","yCoord","preventDefault","newBoardGrid","JSON","parse","stringify","revealed","flagged","getFace","revealAdjacent","flagCount","Number","value","revealedBoard","losingX","losingY","isHitMine","i","length","cells","newSafeCells","setTimeout","revealCell","createBoard","useCallback","gameParams","newGame","board","useEffect","countUp","time","clearTimeout","substr","Math","round","map","gridRow","gridIdx","gridColumn","idx"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport { CountFlags, RevealCells, RevealAdjacentCells } from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport Modal from './Modal';\nimport './index.scss';\nimport NamePrompt from './NamePrompt';\n\nconst GameBoard = () => {\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [customDifficultyParams, setCustomDifficultyParams] = React.useState([9, 9, 10])\n  const [difficulty, setDifficulty] = React.useState('beginner');\n  const [inClick, setInClick] = React.useState(false);\n  const [lostGame, setLostGame] = React.useState(false);\n  const [mineFlagsRemaining, setMineFlagsRemaining] = React.useState(0);\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n  const [showModal, setShowModal] = React.useState(false);\n  const [showPrompt, setShowPrompt] = React.useState(false);\n  const [startedGame, setStartedGame] = React.useState(false);\n  const [timer, setTimer] = React.useState(0);\n  const [wonGame, setWonGame] = React.useState(false);\n  const [zoomed, setZoomed] = React.useState(false);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (!newBoardGrid[xCoord][yCoord].revealed) {\n      if (newBoardGrid[xCoord][yCoord].flagged) {\n        newBoardGrid[xCoord][yCoord].flagged = false;\n        setMineFlagsRemaining(mineFlagsRemaining + 1);\n      } else {\n        newBoardGrid[xCoord][yCoord].flagged = true;\n        setMineFlagsRemaining(mineFlagsRemaining - 1);\n      }\n    }\n    setBoardGrid(newBoardGrid);\n  }\n  \n  const getFace = () => {\n    if (lostGame) {\n      return <span>&#128565;</span>;\n    }\n    if (wonGame) {\n      return <span>&#128526;</span>;\n    }\n    if (inClick) {\n      return <span>&#128558;</span>;\n    }\n    return <span>&#128578;</span>;\n  }\n\n  const revealAdjacent = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    setInClick(true);\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (newBoardGrid[xCoord][yCoord].revealed === true) {\n      const flagCount = CountFlags(newBoardGrid, xCoord, yCoord);\n      if (flagCount === Number(newBoardGrid[xCoord][yCoord].value)) {\n        const revealedBoard = RevealAdjacentCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        if (revealedBoard.lostGame) {\n          setLostGame(true);\n          newBoardGrid[revealedBoard.losingX][revealedBoard.losingY].isHitMine = true;  \n            for (let i = 0; i < mineLocation.length; i++) {\n              newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n            }\n        }\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n    setTimeout(() => setInClick(false), 200);\n  }\n\n  const revealCell = (xCoord, yCoord) => {\n    setInClick(true);\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (!newBoardGrid[xCoord][yCoord].flagged) {\n      if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n        setLostGame(true);\n        newBoardGrid[xCoord][yCoord].isHitMine = true;  \n          for (let i = 0; i < mineLocation.length; i++) {\n            newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n          }\n          setBoardGrid(newBoardGrid);\n      }\n      else {\n        const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n    setTimeout(() => setInClick(false), 200);\n  }\n\n  const createBoard = React.useCallback(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'custom':\n          return customDifficultyParams;\n        case 'expert':\n          return [16, 30, 99];\n        case 'intermediate':\n          return [16, 16, 40];\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    }\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setWonGame(false);\n    setLostGame(false);\n    setStartedGame(false);\n    setTimer(0);\n    setMineFlagsRemaining(gameParams()[2]);\n    setNonMineCount(gameParams()[0] * gameParams()[1] - gameParams()[2])\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [customDifficultyParams, difficulty]);\n\n  React.useEffect(() => {\n    if (nonMineCount === 0) {\n      setWonGame(true);\n    }\n  }, [nonMineCount])\n\n  React.useEffect(() => {\n    if (wonGame) {\n      setShowPrompt(true);\n    }\n  }, [wonGame])\n\n  React.useEffect(() => {\n    createBoard();    \n  }, [createBoard, difficulty])\n\n  React.useEffect(() => {\n    const countUp = () => {\n      setTimer((time) => time + 0.0175);\n    }; \n    \n    if (lostGame || wonGame || timer > 998) {\n      clearTimeout(countUp);\n    } else if (startedGame) {\n      setTimeout(countUp, 10); \n    }\n\n    return () => {\n      clearTimeout(countUp);\n    }\n  }, [startedGame, lostGame, timer, wonGame])\n\n  return (\n    <div className=\"game-container\">\n      <div className={`board-wrapper ${zoomed ? 'board-wrapper__zoomed' : ''}`}>\n        <div className=\"board-header\">\n          <div className=\"number-display\">{mineFlagsRemaining >= 0 ? ('000' + mineFlagsRemaining).substr(-3) : '000'}</div>\n          <button onClick={createBoard}>{getFace()}</button>\n          <div className=\"number-display\">{('000' + Math.round(timer)).substr(-3)}</div>\n        </div>\n        <div className=\"board-container\" onClick={() => setStartedGame(true)}>\n          {boardGrid.map((gridRow, gridIdx) => (\n            <div className=\"board-row\" key={gridIdx}>\n              {gridRow.map((gridColumn, idx) => (\n                <Cell cellInfo={gridColumn} flagCell={flagCell} key={idx} lostGame={lostGame} revealAdjacent={revealAdjacent} revealCell={revealCell} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      <button className=\"interaction-button\" onClick={() => setShowModal(true)}>Open Menu</button>\n      <Modal close={() => setShowModal(false)} difficulty={difficulty} setCustomDifficultyParams={setCustomDifficultyParams} setDifficulty={setDifficulty} setZoomed={setZoomed} visible={showModal} zoomed={zoomed} />\n      <NamePrompt close={() => setShowPrompt(false)} show={showPrompt} />\n    </div>\n  )\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}