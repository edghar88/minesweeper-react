{"ast":null,"code":"export const RevealCells = (cells, xCoord, yCoord, newSafeCells) => {\n  let toShow = [];\n  toShow.push(cells[xCoord][yCoord]);\n\n  while (toShow.length !== 0) {\n    let one = toShow.pop();\n    let i = one.x;\n    let j = one.y;\n\n    if (!one.revealed) {\n      newSafeCells--;\n      one.revealed = true;\n    }\n\n    if (one.value !== 0) {\n      break;\n    } // reveal adjacent cells\n\n\n    if (i > 0 && j > 0 && cells[i - 1][j - 1].value === 0 && !cells[i - 1][j - 1].revealed) {\n      toShow.push(cells[i - 1][j - 1]);\n    }\n\n    if (i < cells.length - 1 && j < cells[0].length - 1 && cells[i + 1][j + 1].value === 0 && !cells[i + 1][j + 1].revealed) {\n      toShow.push(cells[i + 1][j + 1]);\n    }\n\n    if (i > 0 && j < cells[0].length - 1 && cells[i - 1][j + 1].value === 0 && !cells[i - 1][j + 1].revealed) {\n      toShow.push(cells[i - 1][j + 1]);\n    }\n\n    if (i < cells.length - 1 && j > 0 && cells[i + 1][j - 1].value === 0 && !cells[i + 1][j - 1].revealed) {\n      toShow.push(cells[i + 1][j - 1]);\n    }\n\n    if (i > 0 && cells[i - 1][j].value === 0 && !cells[i - 1][j].revealed) {\n      toShow.push(cells[i - 1][j]);\n    }\n\n    if (j < cells[0].length - 1 && cells[i][j + 1].value === 0 && !cells[i][j + 1].revealed) {\n      toShow.push(cells[i][j + 1]);\n    }\n\n    if (i < cells.length - 1 && cells[i + 1][j].value === 0 && !cells[i + 1][j].revealed) {\n      toShow.push(cells[i + 1][j]);\n    }\n\n    if (j > 0 && cells[i][j - 1].value === 0 && !cells[i][j - 1].revealed) {\n      toShow.push(cells[i][j - 1]);\n    } // reveal\n\n\n    if (i > 0 && j > 0 && !cells[i - 1][j - 1].revealed) {\n      cells[i - 1][j - 1].revealed = true;\n      newSafeCells--;\n    }\n\n    if (j > 0 && !cells[i][j - 1].revealed) {\n      cells[i][j - 1].revealed = true;\n      newSafeCells--;\n    }\n\n    if (i < cells.length - 1 && j > 0 && !cells[i + 1][j - 1].revealed) {\n      cells[i + 1][j - 1].revealed = true;\n      newSafeCells--;\n    }\n\n    if (i > 0 && !cells[i - 1][j].revealed) {\n      cells[i - 1][j].revealed = true;\n      newSafeCells--;\n    }\n\n    if (i < cells.length - 1 && !cells[i + 1][j].revealed) {\n      cells[i + 1][j].revealed = true;\n      newSafeCells--;\n    }\n\n    if (i > 0 && j < cells[0].length - 1 && !cells[i - 1][j + 1].revealed) {\n      cells[i - 1][j + 1].revealed = true;\n      newSafeCells--;\n    }\n\n    if (j < cells[0].length - 1 && !cells[i][j + 1].revealed) {\n      cells[i][j + 1].revealed = true;\n      newSafeCells--;\n    }\n\n    if (i < cells.length - 1 && j < cells[0].length - 1 && !cells[i + 1][j + 1].revealed) {\n      cells[i + 1][j + 1].revealed = true;\n      newSafeCells--;\n    }\n  }\n\n  return {\n    cells,\n    newSafeCells\n  };\n};\n_c = RevealCells;\nexport const RevealAdjacentCells = (cells, xCoord, yCoord, newSafeCells) => {\n  let toShow = [];\n  let lostGame = false;\n  let losingX, losingY;\n  toShow.push(cells[xCoord][yCoord]);\n\n  while (toShow.length !== 0) {\n    let one = toShow.pop();\n    let i = one.x;\n    let j = one.y; // reveal\n\n    if (i > 0 && j > 0 && !cells[i - 1][j - 1].revealed && !cells[i - 1][j - 1].flagged) {\n      cells[i - 1][j - 1].revealed = true;\n      newSafeCells--;\n\n      if (cells[i - 1][j - 1].value !== 'X') {\n        if (cells[i - 1][j - 1].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i - 1, j - 1, newSafeCells));\n        }\n      } else {\n        losingX = i - 1;\n        losingY = j - 1;\n        lostGame = true;\n      }\n    }\n\n    if (j > 0 && !cells[i][j - 1].revealed && !cells[i][j - 1].flagged) {\n      cells[i][j - 1].revealed = true;\n      newSafeCells--;\n\n      if (cells[i][j - 1].value !== 'X') {\n        if (cells[i][j - 1].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i, j - 1, newSafeCells));\n        }\n      } else {\n        losingX = i;\n        losingY = j - 1;\n        lostGame = true;\n      }\n    }\n\n    if (i < cells.length - 1 && j > 0 && !cells[i + 1][j - 1].revealed && !cells[i + 1][j - 1].flagged) {\n      cells[i + 1][j - 1].revealed = true;\n      newSafeCells--;\n\n      if (cells[i + 1][j - 1].value !== 'X') {\n        if (cells[i + 1][j - 1].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i + 1, j - 1, newSafeCells));\n        }\n      } else {\n        losingX = i + 1;\n        losingY = j - 1;\n        lostGame = true;\n      }\n    }\n\n    if (i > 0 && !cells[i - 1][j].revealed && !cells[i - 1][j].flagged) {\n      cells[i - 1][j].revealed = true;\n      newSafeCells--;\n\n      if (cells[i - 1][j].value !== 'X') {\n        if (cells[i - 1][j].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i - 1, j, newSafeCells));\n        }\n      } else {\n        losingX = i - 1;\n        losingY = j;\n        lostGame = true;\n      }\n    }\n\n    if (i < cells.length - 1 && !cells[i + 1][j].revealed && !cells[i + 1][j].flagged) {\n      cells[i + 1][j].revealed = true;\n      newSafeCells--;\n\n      if (cells[i + 1][j].value !== 'X') {\n        if (cells[i + 1][j].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i + 1, j, newSafeCells));\n        }\n      } else {\n        losingX = i + 1;\n        losingY = j - 1;\n        lostGame = true;\n      }\n    }\n\n    if (i > 0 && j < cells[0].length - 1 && !cells[i - 1][j + 1].revealed && !cells[i - 1][j + 1].flagged) {\n      cells[i - 1][j + 1].revealed = true;\n      newSafeCells--;\n\n      if (cells[i - 1][j + 1].value !== 'X') {\n        if (cells[i - 1][j + 1].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i - 1, j + 1, newSafeCells));\n        }\n      } else {\n        losingX = i - 1;\n        losingY = j + 1;\n        lostGame = true;\n      }\n    }\n\n    if (j < cells[0].length - 1 && !cells[i][j + 1].revealed && !cells[i][j + 1].flagged) {\n      cells[i][j + 1].revealed = true;\n      newSafeCells--;\n\n      if (cells[i][j + 1].value !== 'X') {\n        if (cells[i][j + 1].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i, j + 1, newSafeCells));\n        }\n      } else {\n        losingX = i;\n        losingY = j + 1;\n        lostGame = true;\n      }\n    }\n\n    if (i < cells.length - 1 && j < cells[0].length - 1 && !cells[i + 1][j + 1].revealed && !cells[i + 1][j + 1].flagged) {\n      cells[i + 1][j + 1].revealed = true;\n      newSafeCells--;\n\n      if (cells[i + 1][j + 1].value !== 'X') {\n        if (cells[i + 1][j + 1].value === 0) {\n          ({\n            cells,\n            newSafeCells\n          } = RevealCells(cells, i + 1, j + 1, newSafeCells));\n        }\n      } else {\n        losingX = i + 1;\n        losingY = j + 1;\n        lostGame = true;\n      }\n    }\n  }\n\n  return {\n    cells,\n    newSafeCells,\n    lostGame,\n    losingX,\n    losingY\n  };\n};\n_c2 = RevealAdjacentCells;\nexport const CountFlags = (cells, xCoord, yCoord) => {\n  let count = 0; // count\n\n  if (xCoord > 0 && yCoord > 0 && cells[xCoord - 1][yCoord - 1].flagged) {\n    count++;\n  }\n\n  if (yCoord > 0 && cells[xCoord][yCoord - 1].flagged) {\n    count++;\n  }\n\n  if (xCoord < cells.length - 1 && yCoord > 0 && cells[xCoord + 1][yCoord - 1].flagged) {\n    count++;\n  }\n\n  if (xCoord > 0 && cells[xCoord - 1][yCoord].flagged) {\n    count++;\n  }\n\n  if (xCoord < cells.length - 1 && cells[xCoord + 1][yCoord].flagged) {\n    count++;\n  }\n\n  if (xCoord > 0 && yCoord < cells[0].length - 1 && cells[xCoord - 1][yCoord + 1].flagged) {\n    count++;\n  }\n\n  if (yCoord < cells[0].length - 1 && cells[xCoord][yCoord + 1].flagged) {\n    count++;\n  }\n\n  if (xCoord < cells.length - 1 && yCoord < cells[0].length - 1 && cells[xCoord + 1][yCoord + 1].flagged) {\n    count++;\n  }\n\n  return count;\n};\n_c3 = CountFlags;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RevealCells\");\n$RefreshReg$(_c2, \"RevealAdjacentCells\");\n$RefreshReg$(_c3, \"CountFlags\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/utils/RevealCells.js"],"names":["RevealCells","cells","xCoord","yCoord","newSafeCells","toShow","push","length","one","pop","i","x","j","y","revealed","value","RevealAdjacentCells","lostGame","losingX","losingY","flagged","CountFlags","count"],"mappings":"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","sourcesContent":["export const RevealCells = (cells, xCoord, yCoord, newSafeCells) => {\n  let toShow = [];\n  toShow.push(cells[xCoord][yCoord]);\n  while (toShow.length !== 0) {\n      let one = toShow.pop();\n      let i = one.x;\n      let j = one.y;\n      if (!one.revealed) {\n        newSafeCells--;\n        one.revealed = true;\n      }\n      if (one.value !== 0) {\n          break;\n      }\n\n      // reveal adjacent cells\n      if (i > 0 && j > 0 && cells[i - 1][j - 1].value === 0 && !cells[i - 1][j - 1].revealed) {\n        toShow.push(cells[i - 1][j - 1]);\n      }\n      if (i < cells.length - 1 && j < cells[0].length - 1 && cells[i + 1][j + 1].value === 0 && !cells[i + 1][j + 1].revealed) {\n        toShow.push(cells[i + 1][j + 1]);\n      }\n      if (i > 0 && j < cells[0].length - 1 && cells[i - 1][j + 1].value === 0 && !cells[i - 1][j + 1].revealed) {\n        toShow.push(cells[i - 1][j + 1]);\n      }\n      if (i < cells.length - 1 && j > 0 && cells[i + 1][j - 1].value === 0 && !cells[i + 1][j - 1].revealed) {\n        toShow.push(cells[i + 1][j - 1]);\n      }\n      if (i > 0 && cells[i - 1][j].value === 0 && !cells[i - 1][j].revealed) {\n        toShow.push(cells[i - 1][j]);\n      }\n      if (j < cells[0].length - 1 && cells[i][j + 1].value === 0 && !cells[i][j + 1].revealed) {\n        toShow.push(cells[i][j + 1]);\n      }\n      if (i < cells.length - 1 && cells[i + 1][j].value === 0 && !cells[i + 1][j].revealed) {\n        toShow.push(cells[i + 1][j]);\n      }\n      if (j > 0 && cells[i][j - 1].value === 0 && !cells[i][j - 1].revealed) {\n        toShow.push(cells[i][j - 1]);\n      }\n\n      // reveal\n      if (i > 0 && j > 0 && !cells[i - 1][j - 1].revealed) {\n        cells[i - 1][j - 1].revealed = true;\n        newSafeCells--;\n      }\n      if (j > 0 && !cells[i][j - 1].revealed) {\n        cells[i][j - 1].revealed = true;\n        newSafeCells--;\n      }\n  \n      if (i < cells.length - 1 && j > 0 && !cells[i + 1][j - 1].revealed) {\n        cells[i + 1][j - 1].revealed = true;\n        newSafeCells--;\n      }\n      if (i > 0 && !cells[i - 1][j].revealed) {\n        cells[i - 1][j].revealed = true;\n        newSafeCells--;\n      }\n      if (i < cells.length - 1 && !cells[i + 1][j].revealed) {\n        cells[i + 1][j].revealed = true;\n        newSafeCells--;\n      }\n      if (i > 0 && j < cells[0].length - 1 && !cells[i - 1][j + 1].revealed) {\n        cells[i - 1][j + 1].revealed = true;\n        newSafeCells--;\n      }  \n      if (j < cells[0].length - 1 && !cells[i][j + 1].revealed) {\n        cells[i][j + 1].revealed = true;\n        newSafeCells--;\n      }\n      if (i < cells.length - 1 && j < cells[0].length - 1 && !cells[i + 1][j + 1].revealed) {\n        cells[i + 1][j + 1].revealed = true;\n        newSafeCells--;\n      }\n  }\n\n  return {cells, newSafeCells}\n}\n\nexport const RevealAdjacentCells = (cells, xCoord, yCoord, newSafeCells) => {\n  let toShow = [];\n  let lostGame = false;\n  let losingX, losingY;\n  toShow.push(cells[xCoord][yCoord]);\n  while (toShow.length !== 0) {\n      let one = toShow.pop();\n      let i = one.x;\n      let j = one.y;\n\n      // reveal\n      if (i > 0 && j > 0 && !cells[i - 1][j - 1].revealed && !cells[i - 1][j - 1].flagged) {\n        cells[i - 1][j - 1].revealed = true;\n        newSafeCells--;\n        if (cells[i - 1][j - 1].value !== 'X') {\n          if (cells[i - 1][j - 1].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i - 1, j - 1, newSafeCells));\n          }\n        } else {\n          losingX = i - 1;\n          losingY = j - 1;\n          lostGame = true;\n        }\n      }\n      if (j > 0 && !cells[i][j - 1].revealed && !cells[i][j - 1].flagged) {\n        cells[i][j - 1].revealed = true;\n        newSafeCells--;\n        if (cells[i][j - 1].value !== 'X') {\n          if (cells[i][j - 1].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i, j - 1, newSafeCells));\n          }\n        } else {\n          losingX = i;\n          losingY = j - 1;\n          lostGame = true;\n        }\n      }\n  \n      if (i < cells.length - 1 && j > 0 && !cells[i + 1][j - 1].revealed && !cells[i + 1][j - 1].flagged) {\n        cells[i + 1][j - 1].revealed = true;\n        newSafeCells--;\n        if (cells[i + 1][j - 1].value !== 'X') {\n          if (cells[i + 1][j - 1].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i + 1, j - 1, newSafeCells));\n          }\n        } else {\n          losingX = i + 1;\n          losingY = j - 1;\n          lostGame = true;\n        }\n      }\n      if (i > 0 && !cells[i - 1][j].revealed && !cells[i - 1][j].flagged) {\n        cells[i - 1][j].revealed = true;\n        newSafeCells--;\n        if (cells[i - 1][j].value !== 'X') {\n          if (cells[i - 1][j].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i - 1, j, newSafeCells));\n          }\n        } else {\n          losingX = i - 1;\n          losingY = j;\n          lostGame = true;\n        }\n      }\n      if (i < cells.length - 1 && !cells[i + 1][j].revealed && !cells[i + 1][j].flagged) {\n        cells[i + 1][j].revealed = true;\n        newSafeCells--;\n        if (cells[i + 1][j].value !== 'X') {\n          if (cells[i + 1][j].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i + 1, j, newSafeCells));\n          }\n        } else {\n          losingX = i + 1;\n          losingY = j - 1;\n          lostGame = true;\n        }\n      }\n      if (i > 0 && j < cells[0].length - 1 && !cells[i - 1][j + 1].revealed && !cells[i - 1][j + 1].flagged) {\n        cells[i - 1][j + 1].revealed = true;\n        newSafeCells--;\n        if (cells[i - 1][j + 1].value !== 'X') {\n          if (cells[i - 1][j + 1].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i - 1, j + 1, newSafeCells));\n          }\n        } else {\n          losingX = i - 1;\n          losingY = j + 1;\n          lostGame = true;\n        }\n      }  \n      if (j < cells[0].length - 1 && !cells[i][j + 1].revealed && !cells[i][j + 1].flagged) {\n        cells[i][j + 1].revealed = true;\n        newSafeCells--;\n        if (cells[i][j + 1].value !== 'X') {\n          if (cells[i][j + 1].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i, j + 1, newSafeCells));\n          }\n        } else {\n          losingX = i;\n          losingY = j + 1;\n          lostGame = true;\n        }\n      }\n      if (i < cells.length - 1 && j < cells[0].length - 1 && !cells[i + 1][j + 1].revealed && !cells[i + 1][j + 1].flagged) {\n        cells[i + 1][j + 1].revealed = true;\n        newSafeCells--;\n        if (cells[i + 1][j + 1].value !== 'X') {\n          if (cells[i + 1][j + 1].value === 0) {\n            ({cells, newSafeCells} = RevealCells(cells, i + 1, j + 1, newSafeCells));\n          }\n        } else {\n          losingX = i + 1;\n          losingY = j + 1;\n          lostGame = true;\n        }\n      }\n  }\n\n  return {cells, newSafeCells, lostGame, losingX, losingY}\n}\n\nexport const CountFlags = (cells, xCoord, yCoord) => {\n  let count = 0;\n\n  // count\n  if (xCoord > 0 && yCoord > 0 && cells[xCoord - 1][yCoord - 1].flagged) {\n    count++;\n  }\n  if (yCoord > 0 && cells[xCoord][yCoord - 1].flagged) {\n    count++;\n  }\n  if (xCoord < cells.length - 1 && yCoord > 0 && cells[xCoord + 1][yCoord - 1].flagged) {\n    count++;\n  }\n  if (xCoord > 0 && cells[xCoord - 1][yCoord].flagged) {\n    count++;\n  }\n  if (xCoord < cells.length - 1 && cells[xCoord + 1][yCoord].flagged) {\n    count++;\n  }\n  if (xCoord > 0 && yCoord < cells[0].length - 1 && cells[xCoord - 1][yCoord + 1].flagged) {\n    count++;\n  }  \n  if (yCoord < cells[0].length - 1 && cells[xCoord][yCoord + 1].flagged) {\n    count++;\n  }\n  if (xCoord < cells.length - 1 && yCoord < cells[0].length - 1 && cells[xCoord + 1][yCoord + 1].flagged) {\n    count++;\n  }\n\n  return count;\n}\n"]},"metadata":{},"sourceType":"module"}