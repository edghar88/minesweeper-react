{"ast":null,"code":"export default function GenerateGameBoard(rows,columns,mineCount){var board=[];var mineLocation=[];// create subColumns\nfor(var x=0;x<rows;x++){var subColumns=[];for(var y=0;y<columns;y++){subColumns.push({flagged:false,revealed:false,value:0,x:x,y:y});}board.push(subColumns);}// randomly place bombs\nvar mines=0;while(mines<mineCount){var _x=randomNumber(0,rows-1);var _y=randomNumber(0,columns-1);if(board[_x][_y].value===0){board[_x][_y].value=\"X\";mineLocation.push([_x,_y]);mines++;}}// add numbers to cell for adjacent bombs\nfor(var i=0;i<rows;i++){for(var j=0;j<columns;j++){if(board[i][j].value===\"X\"){continue;}if(i>0&&board[i-1][j].value===\"X\"){board[i][j].value++;}// get number of mines for each edge and add to cell count\nif(i>0&&j<columns-1&&board[i-1][j+1].value===\"X\"){board[i][j].value++;}if(j<columns-1&&board[i][j+1].value===\"X\"){board[i][j].value++;}if(i<rows-1&&j<columns-1&&board[i+1][j+1].value===\"X\"){board[i][j].value++;}if(i<rows-1&&board[i+1][j].value===\"X\"){board[i][j].value++;}if(i<rows-1&&j>0&&board[i+1][j-1].value===\"X\"){board[i][j].value++;}if(j>0&&board[i][j-1].value===\"X\"){board[i][j].value++;}if(i>0&&j>0&&board[i-1][j-1].value===\"X\"){board[i][j].value++;}}}return{board:board,mineLocation:mineLocation};};function randomNumber(){var min=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var max=arguments.length>1?arguments[1]:undefined;return Math.floor(Math.random()*(max-min+1)+min);}","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/utils/GenerateGameBoard.js"],"names":["GenerateGameBoard","rows","columns","mineCount","board","mineLocation","x","subColumns","y","push","flagged","revealed","value","mines","randomNumber","i","j","min","max","Math","floor","random"],"mappings":"AAAA,cAAe,SAASA,CAAAA,iBAAT,CAA2BC,IAA3B,CAAiCC,OAAjC,CAA0CC,SAA1C,CAAoD,CAC/D,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAIC,CAAAA,YAAY,CAAG,EAAnB,CAEA;AACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,IAApB,CAA0BK,CAAC,EAA3B,CAA+B,CAC7B,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,OAApB,CAA6BM,CAAC,EAA9B,CAAkC,CAChCD,UAAU,CAACE,IAAX,CAAgB,CACdC,OAAO,CAAE,KADK,CAEdC,QAAQ,CAAE,KAFI,CAGdC,KAAK,CAAE,CAHO,CAIdN,CAAC,CAADA,CAJc,CAKdE,CAAC,CAADA,CALc,CAAhB,EAOD,CACDJ,KAAK,CAACK,IAAN,CAAWF,UAAX,EACD,CAED;AACA,GAAIM,CAAAA,KAAK,CAAG,CAAZ,CACA,MAAOA,KAAK,CAAGV,SAAf,CAA0B,CACxB,GAAIG,CAAAA,EAAC,CAAGQ,YAAY,CAAC,CAAD,CAAIb,IAAI,CAAG,CAAX,CAApB,CACA,GAAIO,CAAAA,EAAC,CAAGM,YAAY,CAAC,CAAD,CAAIZ,OAAO,CAAG,CAAd,CAApB,CAEA,GAAIE,KAAK,CAACE,EAAD,CAAL,CAASE,EAAT,EAAYI,KAAZ,GAAsB,CAA1B,CAA6B,CAC3BR,KAAK,CAACE,EAAD,CAAL,CAASE,EAAT,EAAYI,KAAZ,CAAoB,GAApB,CACAP,YAAY,CAACI,IAAb,CAAkB,CAACH,EAAD,CAAIE,EAAJ,CAAlB,EACAK,KAAK,GACN,CACF,CAED;AACA,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,IAApB,CAA0Bc,CAAC,EAA3B,CAA+B,CAC7B,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,OAApB,CAA6Bc,CAAC,EAA9B,CAAkC,CAChC,GAAIZ,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GAAsB,GAA1B,CAA+B,CAC7B,SACD,CAED,GAAIG,CAAC,CAAG,CAAJ,EAASX,KAAK,CAACW,CAAC,CAAG,CAAL,CAAL,CAAaC,CAAb,EAAgBJ,KAAhB,GAA0B,GAAvC,CAA4C,CAC1CR,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CAED;AACA,GAAIG,CAAC,CAAG,CAAJ,EAASC,CAAC,CAAGd,OAAO,CAAG,CAAvB,EAA4BE,KAAK,CAACW,CAAC,CAAG,CAAL,CAAL,CAAaC,CAAC,CAAG,CAAjB,EAAoBJ,KAApB,GAA8B,GAA9D,CAAmE,CACjER,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CACD,GAAII,CAAC,CAAGd,OAAO,CAAG,CAAd,EAAmBE,KAAK,CAACW,CAAD,CAAL,CAASC,CAAC,CAAG,CAAb,EAAgBJ,KAAhB,GAA0B,GAAjD,CAAsD,CACpDR,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CACD,GAAIG,CAAC,CAAGd,IAAI,CAAG,CAAX,EAAgBe,CAAC,CAAGd,OAAO,CAAG,CAA9B,EAAmCE,KAAK,CAACW,CAAC,CAAG,CAAL,CAAL,CAAaC,CAAC,CAAG,CAAjB,EAAoBJ,KAApB,GAA8B,GAArE,CAA0E,CACxER,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CACD,GAAIG,CAAC,CAAGd,IAAI,CAAG,CAAX,EAAgBG,KAAK,CAACW,CAAC,CAAG,CAAL,CAAL,CAAaC,CAAb,EAAgBJ,KAAhB,GAA0B,GAA9C,CAAmD,CACjDR,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CACD,GAAIG,CAAC,CAAGd,IAAI,CAAG,CAAX,EAAgBe,CAAC,CAAG,CAApB,EAAyBZ,KAAK,CAACW,CAAC,CAAG,CAAL,CAAL,CAAaC,CAAC,CAAG,CAAjB,EAAoBJ,KAApB,GAA8B,GAA3D,CAAgE,CAC9DR,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CACD,GAAII,CAAC,CAAG,CAAJ,EAASZ,KAAK,CAACW,CAAD,CAAL,CAASC,CAAC,CAAG,CAAb,EAAgBJ,KAAhB,GAA0B,GAAvC,CAA4C,CAC1CR,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CACD,GAAIG,CAAC,CAAG,CAAJ,EAASC,CAAC,CAAG,CAAb,EAAkBZ,KAAK,CAACW,CAAC,CAAG,CAAL,CAAL,CAAaC,CAAC,CAAG,CAAjB,EAAoBJ,KAApB,GAA8B,GAApD,CAAyD,CACvDR,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYJ,KAAZ,GACD,CACF,CACF,CACD,MAAO,CAAER,KAAK,CAALA,KAAF,CAASC,YAAY,CAAZA,YAAT,CAAP,CACD,EAED,QAASS,CAAAA,YAAT,EAAoC,IAAdG,CAAAA,GAAc,2DAAR,CAAQ,IAALC,CAAAA,GAAK,2CAClC,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAAGD,GAAN,CAAY,CAA7B,EAAkCA,GAA7C,CAAP,CACD","sourcesContent":["export default function GenerateGameBoard(rows, columns, mineCount){\n    let board = [];\n    let mineLocation = [];\n  \n    // create subColumns\n    for (let x = 0; x < rows; x++) {\n      let subColumns = [];\n      for (let y = 0; y < columns; y++) {\n        subColumns.push({\n          flagged: false,\n          revealed: false,\n          value: 0,\n          x,\n          y,\n        });\n      }\n      board.push(subColumns);\n    }\n\n    // randomly place bombs\n    let mines = 0;\n    while (mines < mineCount) {\n      let x = randomNumber(0, rows - 1);\n      let y = randomNumber(0, columns - 1);\n    \n      if (board[x][y].value === 0) {\n        board[x][y].value = \"X\";\n        mineLocation.push([x, y]);\n        mines++;\n      }\n    }\n  \n    // add numbers to cell for adjacent bombs\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (board[i][j].value === \"X\") {\n          continue;\n        }\n  \n        if (i > 0 && board[i - 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // get number of mines for each edge and add to cell count\n        if (i > 0 && j < columns - 1 && board[i - 1][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (j < columns - 1 && board[i][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i < rows - 1 && j < columns - 1 && board[i + 1][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i < rows - 1 && board[i + 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i < rows - 1 && j > 0 && board[i + 1][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (j > 0 && board[i][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n      }\n    }\n    return { board, mineLocation };\n  };\n  \n  function randomNumber(min = 0, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }"]},"metadata":{},"sourceType":"module"}