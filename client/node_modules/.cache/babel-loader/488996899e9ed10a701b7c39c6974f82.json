{"ast":null,"code":"var _jsxFileName = \"/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport Cell from './Cell';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s();\n\n  var _boardGrid$board;\n\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('beginner');\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    newBoardGrid[xCoord][yCoord].flagged = true;\n    setBoardGrid(newBoardGrid);\n  };\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n      alert(\"GAME OVER!\");\n    } else {\n      newBoardGrid[xCoord][yCoord].revealead = true;\n      setBoardGrid(newBoardGrid);\n    }\n  };\n\n  React.useEffect(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    };\n\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    console.log(newGame);\n    setBoardGrid(newGame);\n  }, [difficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: boardGrid && ((_boardGrid$board = boardGrid.board) === null || _boardGrid$board === void 0 ? void 0 : _boardGrid$board.map(gridRow => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: gridRow.map((gridColumn, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n        cellInfo: gridColumn,\n        flagCell: flagCell,\n        revealCell: revealCell\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameBoard, \"GHH2PCOCUfWBkMEpG0aBmNikZpI=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js"],"names":["React","GenerateGameBoard","Cell","GameBoard","boardGrid","setBoardGrid","useState","difficulty","setDifficulty","flagCell","e","xCoord","yCoord","preventDefault","newBoardGrid","JSON","parse","stringify","flagged","revealCell","value","alert","revealead","useEffect","gameParams","newGame","console","log","board","map","gridRow","gridColumn","idx"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,cAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,KAAK,CAACM,QAAN,CAAe,UAAf,CAApC;;AAEA,QAAMG,QAAQ,GAAG,CAACC,CAAD,EAAIC,MAAJ,EAAYC,MAAZ,KAAuB;AACtCF,IAAAA,CAAC,CAACG,cAAF;AACA,QAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeb,SAAf,CAAX,CAAnB;AACAU,IAAAA,YAAY,CAACH,MAAD,CAAZ,CAAqBC,MAArB,EAA6BM,OAA7B,GAAuC,IAAvC;AACAb,IAAAA,YAAY,CAACS,YAAD,CAAZ;AACD,GALD;;AAOA,QAAMK,UAAU,GAAG,CAACR,MAAD,EAASC,MAAT,KAAoB;AACrC,QAAIE,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeb,SAAf,CAAX,CAAnB;;AACA,QAAIU,YAAY,CAACH,MAAD,CAAZ,CAAqBC,MAArB,EAA6BQ,KAA7B,KAAqC,GAAzC,EAA6C;AACzCC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH,KAFD,MAGK;AACDP,MAAAA,YAAY,CAACH,MAAD,CAAZ,CAAqBC,MAArB,EAA6BU,SAA7B,GAAyC,IAAzC;AACAjB,MAAAA,YAAY,CAACS,YAAD,CAAZ;AACH;AACF,GATD;;AAWAd,EAAAA,KAAK,CAACuB,SAAN,CAAgB,MAAM;AACpB,UAAMC,UAAU,GAAG,MAAM;AACvB,cAAQjB,UAAR;AACE,aAAK,UAAL;AACA;AACE,iBAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CAAP;AAHJ;AAKD,KAND;;AAOA,UAAMkB,OAAO,GAAGxB,iBAAiB,CAACuB,UAAU,GAAG,CAAH,CAAX,EAAkBA,UAAU,GAAG,CAAH,CAA5B,EAAmCA,UAAU,GAAG,CAAH,CAA7C,CAAjC;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACApB,IAAAA,YAAY,CAACoB,OAAD,CAAZ;AAED,GAZD,EAYG,CAAClB,UAAD,CAZH;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cACGH,SAAS,yBAAIA,SAAS,CAACwB,KAAd,qDAAI,iBAAiBC,GAAjB,CAAsBC,OAAD,iBACjC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGA,OAAO,CAACD,GAAR,CAAY,CAACE,UAAD,EAAaC,GAAb,kBACX,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAED,UAAhB;AAA4B,QAAA,QAAQ,EAAEtB,QAAtC;AAA0D,QAAA,UAAU,EAAEU;AAAtE,SAAqDa,GAArD;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADY,CAAJ;AADZ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/CD;;GAAM7B,S;;KAAAA,S;AAiDN,eAAeA,SAAf","sourcesContent":["import * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport Cell from './Cell';\nimport './index.scss';\n\nconst GameBoard = () => {\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('beginner');\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    newBoardGrid[xCoord][yCoord].flagged = true;\n    setBoardGrid(newBoardGrid);\n  }\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (newBoardGrid[xCoord][yCoord].value===\"X\"){\n        alert(\"GAME OVER!\");\n    }\n    else {\n        newBoardGrid[xCoord][yCoord].revealead = true;\n        setBoardGrid(newBoardGrid);\n    }\n  }\n\n  React.useEffect(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    }\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    console.log(newGame);\n    setBoardGrid(newGame);\n    \n  }, [difficulty])\n\n  return (\n    <div className=\"board-container\">\n      {boardGrid && boardGrid.board?.map((gridRow) => (\n        <div className=\"board-row\">\n          {gridRow.map((gridColumn, idx) => (\n            <Cell cellInfo={gridColumn} flagCell={flagCell} key={idx} revealCell={revealCell} />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}