{"ast":null,"code":"var _jsxFileName = \"/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/Cell/index.js\";\nimport * as React from 'react';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cell = props => {\n  const {\n    cellInfo,\n    flagCell,\n    lostGame,\n    revealCell\n  } = props;\n\n  const getCellValue = () => {\n    if (cellInfo.revealed) {\n      if (cellInfo.isHitMine || cellInfo.value === 'X') {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u2600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 16\n        }, this);\n      }\n    } else {\n      if (cellInfo.flagged) {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"board-cell__flagged\",\n          children: \"\\u2691\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 16\n        }, this);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `board-cell ${cellInfo.revealed && 'board-cell__revealed'} ${cellInfo.isHitMine && 'board-cell__hit-mine'}`,\n    onClick: () => !lostGame && revealCell(cellInfo.x, cellInfo.y),\n    onContextMenu: e => flagCell(e, cellInfo.x, cellInfo.y),\n    children: cellInfo.revealed ? cellInfo.isHitMine || cellInfo.value === 'X' ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u2600\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this) : cellInfo.value : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/Cell/index.js"],"names":["React","Cell","props","cellInfo","flagCell","lostGame","revealCell","getCellValue","revealed","isHitMine","value","flagged","x","y","e"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,cAAP;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,MAA+CJ,KAArD;;AAEA,QAAMK,YAAY,GAAG,MAAM;AACzB,QAAIJ,QAAQ,CAACK,QAAb,EAAuB;AACrB,UAAIL,QAAQ,CAACM,SAAT,IAAsBN,QAAQ,CAACO,KAAT,KAAmB,GAA7C,EAAkD;AAChD,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;AACF,KAJD,MAIO;AACL,UAAIP,QAAQ,CAACQ,OAAb,EAAsB;AACpB,4BAAO;AAAM,UAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;AACF;AACF,GAVD;;AAYA,sBACE;AACE,IAAA,SAAS,EAAG,cAAaR,QAAQ,CAACK,QAAT,IAAqB,sBAAuB,IAAGL,QAAQ,CAACM,SAAT,IAAsB,sBAAuB,EADvH;AAEE,IAAA,OAAO,EAAE,MAAM,CAACJ,QAAD,IAAaC,UAAU,CAACH,QAAQ,CAACS,CAAV,EAAaT,QAAQ,CAACU,CAAtB,CAFxC;AAGE,IAAA,aAAa,EAAGC,CAAD,IAAOV,QAAQ,CAACU,CAAD,EAAIX,QAAQ,CAACS,CAAb,EAAgBT,QAAQ,CAACU,CAAzB,CAHhC;AAAA,cAKGV,QAAQ,CAACK,QAAT,GACGL,QAAQ,CAACM,SAAT,IAAsBN,QAAQ,CAACO,KAAT,KAAmB,GAAzC,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,GAEEP,QAAQ,CAACO,KAHd,GAIG;AATN;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5BD;;KAAMT,I;AA8BN,eAAeA,IAAf","sourcesContent":["import * as React from 'react';\nimport './index.scss';\n\nconst Cell = (props) => {\n  const { cellInfo, flagCell, lostGame, revealCell } = props;\n\n  const getCellValue = () => {\n    if (cellInfo.revealed) {\n      if (cellInfo.isHitMine || cellInfo.value === 'X') {\n        return <span>&#9728;</span>\n      }\n    } else {\n      if (cellInfo.flagged) {\n        return <span className=\"board-cell__flagged\">&#9873;</span>\n      }\n    }\n  }\n\n  return (\n    <div\n      className={`board-cell ${cellInfo.revealed && 'board-cell__revealed'} ${cellInfo.isHitMine && 'board-cell__hit-mine'}`}\n      onClick={() => !lostGame && revealCell(cellInfo.x, cellInfo.y)}\n      onContextMenu={(e) => flagCell(e, cellInfo.x, cellInfo.y)}\n    >\n      {cellInfo.revealed\n        ? cellInfo.isHitMine || cellInfo.value === 'X'\n          ? <span>&#9728;</span>\n          : cellInfo.value\n        : ''}\n    </div>\n  )\n}\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}