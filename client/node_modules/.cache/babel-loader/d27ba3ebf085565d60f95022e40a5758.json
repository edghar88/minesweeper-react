{"ast":null,"code":"var _jsxFileName = \"/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport { CountFlags, RevealCells, RevealAdjacentCells } from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s();\n\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('intermediate');\n  const [lostGame, setLostGame] = React.useState(false);\n  const [mineFlagsRemaining, setMineFlagsRemaining] = React.useState(0);\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n  const [startedGame, setStartedGame] = React.useState(false);\n  const [timer, setTimer] = React.useState(0);\n  const [wonGame, setWonGame] = React.useState(false);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (!newBoardGrid[xCoord][yCoord].revealed) {\n      if (newBoardGrid[xCoord][yCoord].flagged) {\n        newBoardGrid[xCoord][yCoord].flagged = false;\n        setMineFlagsRemaining(mineFlagsRemaining + 1);\n      } else {\n        newBoardGrid[xCoord][yCoord].flagged = true;\n        setMineFlagsRemaining(mineFlagsRemaining - 1);\n      }\n    }\n\n    setBoardGrid(newBoardGrid);\n  };\n\n  const revealAdjacent = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (newBoardGrid[xCoord][yCoord].revealed === true) {\n      const flagCount = CountFlags(newBoardGrid, xCoord, yCoord);\n      console.log(flagCount, newBoardGrid[xCoord][yCoord]);\n\n      if (flagCount === Number(newBoardGrid[xCoord][yCoord].value)) {\n        const revealedBoard = RevealAdjacentCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        setBoardGrid(revealedBoard.cells);\n\n        if (revealedBoard.lostGame) {\n          setLostGame(true);\n          newBoardGrid[revealedBoard.losingX][revealedBoard.losingY].isHitMine = true;\n\n          for (let i = 0; i < mineLocation.length; i++) {\n            newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n          }\n        }\n\n        setBoardGrid(newBoardGrid);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n  };\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (!newBoardGrid[xCoord][yCoord].flagged) {\n      if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n        setLostGame(true);\n        newBoardGrid[xCoord][yCoord].isHitMine = true;\n\n        for (let i = 0; i < mineLocation.length; i++) {\n          newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n        }\n\n        setBoardGrid(newBoardGrid);\n      } else {\n        const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n  };\n\n  const createBoard = React.useCallback(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'expert':\n          return [16, 30, 99];\n\n        case 'intermediate':\n          return [16, 16, 40];\n\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    };\n\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setWonGame(false);\n    setLostGame(false);\n    setStartedGame(false);\n    setTimer(0);\n    setMineFlagsRemaining(gameParams()[2]);\n    setNonMineCount(gameParams()[0] * gameParams()[1] - gameParams()[2]);\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [difficulty]);\n  React.useEffect(() => {\n    if (nonMineCount === 0) {\n      setWonGame(true);\n      alert('You win!');\n    }\n  }, [nonMineCount]);\n  React.useEffect(() => {\n    createBoard();\n  }, [createBoard, difficulty]);\n  React.useEffect(() => {\n    const countUp = () => {\n      setTimer(time => time + 0.0175);\n    };\n\n    if (lostGame || wonGame || timer > 998) {\n      clearTimeout(countUp);\n    } else if (startedGame) {\n      setTimeout(countUp, 10);\n    }\n\n    return () => {\n      clearTimeout(countUp);\n    };\n  }, [startedGame, lostGame, timer, wonGame]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-display\",\n        children: mineFlagsRemaining >= 0 ? ('000' + mineFlagsRemaining).substr(-3) : '000'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createBoard,\n        children: lostGame ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDE35\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 51\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDE00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 76\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-display\",\n        children: ('000' + Math.round(timer)).substr(-3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      onClick: () => setStartedGame(true),\n      children: boardGrid.map((gridRow, gridIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: gridRow.map((gridColumn, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n          cellInfo: gridColumn,\n          flagCell: flagCell,\n          lostGame: lostGame,\n          revealAdjacent: revealAdjacent,\n          revealCell: revealCell\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this))\n      }, gridIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GameBoard, \"/l8qhnkW5opBVh+/Dy+o5KpWgwI=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js"],"names":["React","GenerateGameBoard","CountFlags","RevealCells","RevealAdjacentCells","Cell","GameBoard","boardGrid","setBoardGrid","useState","difficulty","setDifficulty","lostGame","setLostGame","mineFlagsRemaining","setMineFlagsRemaining","mineLocation","setMineLocation","nonMineCount","setNonMineCount","startedGame","setStartedGame","timer","setTimer","wonGame","setWonGame","flagCell","e","xCoord","yCoord","preventDefault","newBoardGrid","JSON","parse","stringify","revealed","flagged","revealAdjacent","flagCount","console","log","Number","value","revealedBoard","cells","losingX","losingY","isHitMine","i","length","newSafeCells","revealCell","createBoard","useCallback","gameParams","newGame","board","useEffect","alert","countUp","time","clearTimeout","setTimeout","substr","Math","round","map","gridRow","gridIdx","gridColumn","idx"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport { CountFlags, RevealCells, RevealAdjacentCells } from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport './index.scss';\n\nconst GameBoard = () => {\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('intermediate');\n  const [lostGame, setLostGame] = React.useState(false);\n  const [mineFlagsRemaining, setMineFlagsRemaining] = React.useState(0);\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n  const [startedGame, setStartedGame] = React.useState(false);\n  const [timer, setTimer] = React.useState(0);\n  const [wonGame, setWonGame] = React.useState(false);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (!newBoardGrid[xCoord][yCoord].revealed) {\n      if (newBoardGrid[xCoord][yCoord].flagged) {\n        newBoardGrid[xCoord][yCoord].flagged = false;\n        setMineFlagsRemaining(mineFlagsRemaining + 1);\n      } else {\n        newBoardGrid[xCoord][yCoord].flagged = true;\n        setMineFlagsRemaining(mineFlagsRemaining - 1);\n      }\n    }\n    setBoardGrid(newBoardGrid);\n  }\n  \n  const revealAdjacent = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (newBoardGrid[xCoord][yCoord].revealed === true) {\n      const flagCount = CountFlags(newBoardGrid, xCoord, yCoord);\n      console.log(flagCount, newBoardGrid[xCoord][yCoord]);\n      if (flagCount === Number(newBoardGrid[xCoord][yCoord].value)) {\n        const revealedBoard = RevealAdjacentCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        setBoardGrid(revealedBoard.cells);\n        if (revealedBoard.lostGame) {\n          setLostGame(true);\n          newBoardGrid[revealedBoard.losingX][revealedBoard.losingY].isHitMine = true;  \n            for (let i = 0; i < mineLocation.length; i++) {\n              newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n            }\n        }\n        setBoardGrid(newBoardGrid);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n  }\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (!newBoardGrid[xCoord][yCoord].flagged) {\n      if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n        setLostGame(true);\n        newBoardGrid[xCoord][yCoord].isHitMine = true;  \n          for (let i = 0; i < mineLocation.length; i++) {\n            newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n          }\n          setBoardGrid(newBoardGrid);\n      }\n      else {\n        const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n  }\n\n  const createBoard = React.useCallback(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'expert':\n          return [16, 30, 99];\n        case 'intermediate':\n          return [16, 16, 40];\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    }\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setWonGame(false);\n    setLostGame(false);\n    setStartedGame(false);\n    setTimer(0);\n    setMineFlagsRemaining(gameParams()[2]);\n    setNonMineCount(gameParams()[0] * gameParams()[1] - gameParams()[2])\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [difficulty]);\n\n  React.useEffect(() => {\n    if (nonMineCount === 0) {\n      setWonGame(true);\n      alert('You win!');\n    }\n  }, [nonMineCount])\n\n  React.useEffect(() => {\n    createBoard();    \n  }, [createBoard, difficulty])\n\n  React.useEffect(() => {\n    const countUp = () => {\n      setTimer((time) => time + 0.0175);\n    }; \n    \n    if (lostGame || wonGame || timer > 998) {\n      clearTimeout(countUp);\n    } else if (startedGame) {\n      setTimeout(countUp, 10); \n    }\n\n    return () => {\n      clearTimeout(countUp);\n    }\n  }, [startedGame, lostGame, timer, wonGame])\n\n  return (\n    <>\n      <div className=\"board-header\">\n        <div className=\"number-display\">{mineFlagsRemaining >= 0 ? ('000' + mineFlagsRemaining).substr(-3) : '000'}</div>\n        <button onClick={createBoard}>{lostGame ? <span>&#128565;</span> : <span>&#128512;</span>}</button>\n        <div className=\"number-display\">{('000' + Math.round(timer)).substr(-3)}</div>\n      </div>\n      <div className=\"board-container\" onClick={() => setStartedGame(true)}>\n        {boardGrid.map((gridRow, gridIdx) => (\n          <div className=\"board-row\" key={gridIdx}>\n            {gridRow.map((gridColumn, idx) => (\n              <Cell cellInfo={gridColumn} flagCell={flagCell} key={idx} lostGame={lostGame} revealAdjacent={revealAdjacent} revealCell={revealCell} />\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}