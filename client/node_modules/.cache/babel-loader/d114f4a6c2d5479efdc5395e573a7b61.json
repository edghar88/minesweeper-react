{"ast":null,"code":"export default function GenerateGameBoard(rows, columns, mineCount) {\n  let board = []; // create subColumns\n\n  for (let x = 0; x < rows; x++) {\n    let subColumns = [];\n\n    for (let y = 0; y < columns; y++) {\n      subColumns.push({\n        flagged: false,\n        revealed: false,\n        value: 0,\n        x,\n        y\n      });\n    }\n\n    board.push(subColumns);\n  } // randomly place bombs\n\n\n  let mines = 0;\n\n  while (mines < mineCount) {\n    let x = randomNumber(0, rows - 1);\n    let y = randomNumber(0, columns - 1);\n\n    if (board[x][y].value === 0) {\n      board[x][y].value = \"X\";\n      mines++;\n    }\n  } // add numbers to cell for adjacent bombs\n\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (board[i][j].value === \"X\") {\n        continue;\n      }\n\n      if (i > 0 && board[i - 1][j].value === \"X\") {\n        board[i][j].value++;\n      } // get number of mines for each edge and add to cell count\n\n\n      if (i > 0 && j < columns - 1 && board[i - 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      if (j < columns - 1 && board[i][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      if (i < rows - 1 && j < columns - 1 && board[i + 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      if (i < rows - 1 && board[i + 1][j].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      if (i < rows - 1 && j > 0 && board[i + 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      if (j > 0 && board[i][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n    }\n  }\n\n  return board;\n}\n_c = GenerateGameBoard;\n;\n\nfunction randomNumber(min = 0, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateGameBoard\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/utils/GenerateGameBoard.js"],"names":["GenerateGameBoard","rows","columns","mineCount","board","x","subColumns","y","push","flagged","revealed","value","mines","randomNumber","i","j","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["export default function GenerateGameBoard(rows, columns, mineCount){\n    let board = [];\n  \n    // create subColumns\n    for (let x = 0; x < rows; x++) {\n      let subColumns = [];\n      for (let y = 0; y < columns; y++) {\n        subColumns.push({\n          flagged: false,\n          revealed: false,\n          value: 0,\n          x,\n          y,\n        });\n      }\n      board.push(subColumns);\n    }\n\n    // randomly place bombs\n    let mines = 0;\n    while (mines < mineCount) {\n      let x = randomNumber(0, rows - 1);\n      let y = randomNumber(0, columns - 1);\n    \n      if (board[x][y].value === 0) {\n        board[x][y].value = \"X\";\n        mines++;\n      }\n    }\n  \n    // add numbers to cell for adjacent bombs\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (board[i][j].value === \"X\") {\n          continue;\n        }\n  \n        if (i > 0 && board[i - 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // get number of mines for each edge and add to cell count\n        if (i > 0 && j < columns - 1 && board[i - 1][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (j < columns - 1 && board[i][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i < rows - 1 && j < columns - 1 && board[i + 1][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i < rows - 1 && board[i + 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i < rows - 1 && j > 0 && board[i + 1][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (j > 0 && board[i][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n        if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n      }\n    }\n    return board;\n  };\n  \n  function randomNumber(min = 0, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }"]},"metadata":{},"sourceType":"module"}