{"ast":null,"code":"var _jsxFileName = \"/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport RevealCells from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s();\n\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('beginner');\n  const [lostGame, setLostGame] = React.useState(false);\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n  const [timer, setTimer] = React.useState(0);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    newBoardGrid[xCoord][yCoord].flagged = true;\n    setBoardGrid(newBoardGrid);\n  };\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n\n    if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n      setLostGame(true);\n      newBoardGrid[xCoord][yCoord].isHitMine = true;\n\n      for (let i = 0; i < mineLocation.length; i++) {\n        newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n      }\n\n      setBoardGrid(newBoardGrid);\n    } else {\n      const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n      setBoardGrid(revealedBoard.cells);\n      setNonMineCount(revealedBoard.newSafeCells);\n    }\n  };\n\n  const createBoard = React.useCallback(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    };\n\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setLostGame(false);\n    setNonMineCount(gameParams()[0] * gameParams()[1] - gameParams()[2]);\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [difficulty]);\n  React.useEffect(() => {\n    createBoard();\n  }, [createBoard, difficulty]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-header\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createBoard,\n        children: lostGame ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDE35\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 51\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDE00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 76\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: boardGrid.map(gridRow => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: gridRow.map((gridColumn, idx) => /*#__PURE__*/_jsxDEV(Cell, {\n          cellInfo: gridColumn,\n          flagCell: flagCell,\n          lostGame: lostGame,\n          revealCell: revealCell\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GameBoard, \"GU+aIIRGfsFWNtIRAmY4d6yRgm8=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js"],"names":["React","GenerateGameBoard","RevealCells","Cell","GameBoard","boardGrid","setBoardGrid","useState","difficulty","setDifficulty","lostGame","setLostGame","mineLocation","setMineLocation","nonMineCount","setNonMineCount","timer","setTimer","flagCell","e","xCoord","yCoord","preventDefault","newBoardGrid","JSON","parse","stringify","flagged","revealCell","value","isHitMine","i","length","revealed","revealedBoard","cells","newSafeCells","createBoard","useCallback","gameParams","newGame","board","useEffect","map","gridRow","gridColumn","idx"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport RevealCells from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport './index.scss';\n\nconst GameBoard = () => {\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [difficulty, setDifficulty] = React.useState('beginner');\n  const [lostGame, setLostGame] = React.useState(false);\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n  const [timer, setTimer] = React.useState(0);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    newBoardGrid[xCoord][yCoord].flagged = true;\n    setBoardGrid(newBoardGrid);\n  }\n\n  const revealCell = (xCoord, yCoord) => {\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n      setLostGame(true);\n      newBoardGrid[xCoord][yCoord].isHitMine = true;  \n        for (let i = 0; i < mineLocation.length; i++) {\n          newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n        }\n        setBoardGrid(newBoardGrid);\n    }\n    else {\n      const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n      setBoardGrid(revealedBoard.cells);\n      setNonMineCount(revealedBoard.newSafeCells);\n    }\n  }\n\n  const createBoard = React.useCallback(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    }\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setLostGame(false);\n    setNonMineCount(gameParams()[0] * gameParams()[1] - gameParams()[2])\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [difficulty]);\n\n  React.useEffect(() => {\n    createBoard();    \n  }, [createBoard, difficulty])\n\n  return (\n    <>\n      <div className=\"board-header\">\n        <button onClick={createBoard}>{lostGame ? <span>&#128565;</span> : <span>&#128512;</span>}</button>\n        </div>\n      <div className=\"board-container\">\n        {boardGrid.map((gridRow) => (\n          <div className=\"board-row\">\n            {gridRow.map((gridColumn, idx) => (\n              <Cell cellInfo={gridColumn} flagCell={flagCell} key={idx} lostGame={lostGame} revealCell={revealCell} />\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}