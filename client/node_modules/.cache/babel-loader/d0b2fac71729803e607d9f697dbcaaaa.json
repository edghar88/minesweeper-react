{"ast":null,"code":"import _slicedToArray from\"/Users/edgar/projects/minesweeper-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as React from'react';import GenerateGameBoard from'../../utils/GenerateGameBoard';import{CountFlags,RevealCells,RevealAdjacentCells}from'../../utils/RevealCells';import Cell from'./Cell';import Modal from'./Modal';import'./index.scss';import NamePrompt from'./NamePrompt';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GameBoard=function GameBoard(_ref){var setUpdatedBoard=_ref.setUpdatedBoard;var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),boardGrid=_React$useState2[0],setBoardGrid=_React$useState2[1];var _React$useState3=React.useState([9,9,10]),_React$useState4=_slicedToArray(_React$useState3,2),customDifficultyParams=_React$useState4[0],setCustomDifficultyParams=_React$useState4[1];var _React$useState5=React.useState('beginner'),_React$useState6=_slicedToArray(_React$useState5,2),difficulty=_React$useState6[0],setDifficulty=_React$useState6[1];var _React$useState7=React.useState(false),_React$useState8=_slicedToArray(_React$useState7,2),inClick=_React$useState8[0],setInClick=_React$useState8[1];var _React$useState9=React.useState(false),_React$useState10=_slicedToArray(_React$useState9,2),lostGame=_React$useState10[0],setLostGame=_React$useState10[1];var _React$useState11=React.useState(0),_React$useState12=_slicedToArray(_React$useState11,2),mineFlagsRemaining=_React$useState12[0],setMineFlagsRemaining=_React$useState12[1];var _React$useState13=React.useState([]),_React$useState14=_slicedToArray(_React$useState13,2),mineLocation=_React$useState14[0],setMineLocation=_React$useState14[1];var _React$useState15=React.useState(0),_React$useState16=_slicedToArray(_React$useState15,2),nonMineCount=_React$useState16[0],setNonMineCount=_React$useState16[1];var _React$useState17=React.useState(false),_React$useState18=_slicedToArray(_React$useState17,2),showModal=_React$useState18[0],setShowModal=_React$useState18[1];var _React$useState19=React.useState(false),_React$useState20=_slicedToArray(_React$useState19,2),showPrompt=_React$useState20[0],setShowPrompt=_React$useState20[1];var _React$useState21=React.useState(false),_React$useState22=_slicedToArray(_React$useState21,2),startedGame=_React$useState22[0],setStartedGame=_React$useState22[1];var _React$useState23=React.useState(0),_React$useState24=_slicedToArray(_React$useState23,2),timer=_React$useState24[0],setTimer=_React$useState24[1];var _React$useState25=React.useState(false),_React$useState26=_slicedToArray(_React$useState25,2),wonGame=_React$useState26[0],setWonGame=_React$useState26[1];var _React$useState27=React.useState(false),_React$useState28=_slicedToArray(_React$useState27,2),zoomed=_React$useState28[0],setZoomed=_React$useState28[1];var flagCell=function flagCell(e,xCoord,yCoord){e.preventDefault();var newBoardGrid=JSON.parse(JSON.stringify(boardGrid));if(!newBoardGrid[xCoord][yCoord].revealed){if(newBoardGrid[xCoord][yCoord].flagged){newBoardGrid[xCoord][yCoord].flagged=false;setMineFlagsRemaining(mineFlagsRemaining+1);}else{newBoardGrid[xCoord][yCoord].flagged=true;setMineFlagsRemaining(mineFlagsRemaining-1);}}setBoardGrid(newBoardGrid);};var getFace=function getFace(){if(lostGame){return/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDE35\"});}if(wonGame){return/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDE0E\"});}if(inClick){return/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDE2E\"});}return/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDE42\"});};var revealAdjacent=function revealAdjacent(e,xCoord,yCoord){e.preventDefault();setInClick(true);var newBoardGrid=JSON.parse(JSON.stringify(boardGrid));if(newBoardGrid[xCoord][yCoord].revealed===true){var flagCount=CountFlags(newBoardGrid,xCoord,yCoord);if(flagCount===Number(newBoardGrid[xCoord][yCoord].value)){var revealedBoard=RevealAdjacentCells(newBoardGrid,xCoord,yCoord,nonMineCount);if(revealedBoard.lostGame){setLostGame(true);newBoardGrid[revealedBoard.losingX][revealedBoard.losingY].isHitMine=true;for(var i=0;i<mineLocation.length;i++){newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed=true;}}setBoardGrid(revealedBoard.cells);setNonMineCount(revealedBoard.newSafeCells);}}setTimeout(function(){return setInClick(false);},200);};var revealCell=function revealCell(xCoord,yCoord){setInClick(true);var newBoardGrid=JSON.parse(JSON.stringify(boardGrid));if(!newBoardGrid[xCoord][yCoord].flagged){if(newBoardGrid[xCoord][yCoord].value===\"X\"){setLostGame(true);newBoardGrid[xCoord][yCoord].isHitMine=true;for(var i=0;i<mineLocation.length;i++){newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed=true;}setBoardGrid(newBoardGrid);}else{var revealedBoard=RevealCells(newBoardGrid,xCoord,yCoord,nonMineCount);setBoardGrid(revealedBoard.cells);setNonMineCount(revealedBoard.newSafeCells);}}setTimeout(function(){return setInClick(false);},200);};var createBoard=React.useCallback(function(){var gameParams=function gameParams(){switch(difficulty){case'custom':return customDifficultyParams;case'expert':return[16,30,99];case'intermediate':return[16,16,40];case'beginner':default:return[9,9,10];}};var newGame=GenerateGameBoard(gameParams()[0],gameParams()[1],gameParams()[2]);setWonGame(false);setLostGame(false);setStartedGame(false);setTimer(0);setMineFlagsRemaining(gameParams()[2]);setNonMineCount(gameParams()[0]*gameParams()[1]-gameParams()[2]);setMineLocation(newGame.mineLocation);setBoardGrid(newGame.board);},[customDifficultyParams,difficulty]);React.useEffect(function(){if(nonMineCount===0){setWonGame(true);}},[nonMineCount]);React.useEffect(function(){if(wonGame){setShowPrompt(true);}},[wonGame]);React.useEffect(function(){createBoard();},[createBoard,difficulty]);React.useEffect(function(){var countUp=function countUp(){setTimer(function(time){return time+0.0175;});};if(lostGame||wonGame||timer>998){clearTimeout(countUp);}else if(startedGame){setTimeout(countUp,10);}return function(){clearTimeout(countUp);};},[startedGame,lostGame,timer,wonGame]);return/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"board-wrapper \".concat(zoomed?'board-wrapper__zoomed':''),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"board-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"number-display\",children:mineFlagsRemaining>=0?('000'+mineFlagsRemaining).substr(-3):'000'}),/*#__PURE__*/_jsx(\"button\",{onClick:createBoard,children:getFace()}),/*#__PURE__*/_jsx(\"div\",{className:\"number-display\",children:('000'+Math.round(timer)).substr(-3)})]}),/*#__PURE__*/_jsx(\"div\",{className:\"board-container\",onClick:function onClick(){return setStartedGame(true);},children:boardGrid.map(function(gridRow,gridIdx){return/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:gridRow.map(function(gridColumn,idx){return/*#__PURE__*/_jsx(Cell,{cellInfo:gridColumn,flagCell:flagCell,lostGame:lostGame,revealAdjacent:revealAdjacent,revealCell:revealCell},idx);})},gridIdx);})})]}),/*#__PURE__*/_jsx(\"button\",{className:\"interaction-button\",onClick:function onClick(){return setShowModal(true);},children:\"Open Menu\"}),/*#__PURE__*/_jsx(Modal,{close:function close(){return setShowModal(false);},difficulty:difficulty,setCustomDifficultyParams:setCustomDifficultyParams,setDifficulty:setDifficulty,setZoomed:setZoomed,visible:showModal,zoomed:zoomed}),/*#__PURE__*/_jsx(NamePrompt,{close:function close(){return setShowPrompt(false);},difficulty:difficulty,setUpdatedBoard:setUpdatedBoard,timer:timer,visible:showPrompt})]});};export default GameBoard;","map":{"version":3,"sources":["/Users/edgar/projects/minesweeper-react/client/src/components/GameBoard/index.js"],"names":["React","GenerateGameBoard","CountFlags","RevealCells","RevealAdjacentCells","Cell","Modal","NamePrompt","GameBoard","setUpdatedBoard","useState","boardGrid","setBoardGrid","customDifficultyParams","setCustomDifficultyParams","difficulty","setDifficulty","inClick","setInClick","lostGame","setLostGame","mineFlagsRemaining","setMineFlagsRemaining","mineLocation","setMineLocation","nonMineCount","setNonMineCount","showModal","setShowModal","showPrompt","setShowPrompt","startedGame","setStartedGame","timer","setTimer","wonGame","setWonGame","zoomed","setZoomed","flagCell","e","xCoord","yCoord","preventDefault","newBoardGrid","JSON","parse","stringify","revealed","flagged","getFace","revealAdjacent","flagCount","Number","value","revealedBoard","losingX","losingY","isHitMine","i","length","cells","newSafeCells","setTimeout","revealCell","createBoard","useCallback","gameParams","newGame","board","useEffect","countUp","time","clearTimeout","substr","Math","round","map","gridRow","gridIdx","gridColumn","idx"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport GenerateGameBoard from '../../utils/GenerateGameBoard';\nimport { CountFlags, RevealCells, RevealAdjacentCells } from '../../utils/RevealCells';\nimport Cell from './Cell';\nimport Modal from './Modal';\nimport './index.scss';\nimport NamePrompt from './NamePrompt';\n\nconst GameBoard = ({ setUpdatedBoard }) => {\n  const [boardGrid, setBoardGrid] = React.useState([]);\n  const [customDifficultyParams, setCustomDifficultyParams] = React.useState([9, 9, 10])\n  const [difficulty, setDifficulty] = React.useState('beginner');\n  const [inClick, setInClick] = React.useState(false);\n  const [lostGame, setLostGame] = React.useState(false);\n  const [mineFlagsRemaining, setMineFlagsRemaining] = React.useState(0);\n  const [mineLocation, setMineLocation] = React.useState([]);\n  const [nonMineCount, setNonMineCount] = React.useState(0);\n  const [showModal, setShowModal] = React.useState(false);\n  const [showPrompt, setShowPrompt] = React.useState(false);\n  const [startedGame, setStartedGame] = React.useState(false);\n  const [timer, setTimer] = React.useState(0);\n  const [wonGame, setWonGame] = React.useState(false);\n  const [zoomed, setZoomed] = React.useState(false);\n\n  const flagCell = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (!newBoardGrid[xCoord][yCoord].revealed) {\n      if (newBoardGrid[xCoord][yCoord].flagged) {\n        newBoardGrid[xCoord][yCoord].flagged = false;\n        setMineFlagsRemaining(mineFlagsRemaining + 1);\n      } else {\n        newBoardGrid[xCoord][yCoord].flagged = true;\n        setMineFlagsRemaining(mineFlagsRemaining - 1);\n      }\n    }\n    setBoardGrid(newBoardGrid);\n  }\n  \n  const getFace = () => {\n    if (lostGame) {\n      return <span>&#128565;</span>;\n    }\n    if (wonGame) {\n      return <span>&#128526;</span>;\n    }\n    if (inClick) {\n      return <span>&#128558;</span>;\n    }\n    return <span>&#128578;</span>;\n  }\n\n  const revealAdjacent = (e, xCoord, yCoord) => {\n    e.preventDefault();\n    setInClick(true);\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (newBoardGrid[xCoord][yCoord].revealed === true) {\n      const flagCount = CountFlags(newBoardGrid, xCoord, yCoord);\n      if (flagCount === Number(newBoardGrid[xCoord][yCoord].value)) {\n        const revealedBoard = RevealAdjacentCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        if (revealedBoard.lostGame) {\n          setLostGame(true);\n          newBoardGrid[revealedBoard.losingX][revealedBoard.losingY].isHitMine = true;  \n            for (let i = 0; i < mineLocation.length; i++) {\n              newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n            }\n        }\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n    setTimeout(() => setInClick(false), 200);\n  }\n\n  const revealCell = (xCoord, yCoord) => {\n    setInClick(true);\n    let newBoardGrid = JSON.parse(JSON.stringify(boardGrid));\n    if (!newBoardGrid[xCoord][yCoord].flagged) {\n      if (newBoardGrid[xCoord][yCoord].value === \"X\") {\n        setLostGame(true);\n        newBoardGrid[xCoord][yCoord].isHitMine = true;  \n          for (let i = 0; i < mineLocation.length; i++) {\n            newBoardGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n          }\n          setBoardGrid(newBoardGrid);\n      }\n      else {\n        const revealedBoard = RevealCells(newBoardGrid, xCoord, yCoord, nonMineCount);\n        setBoardGrid(revealedBoard.cells);\n        setNonMineCount(revealedBoard.newSafeCells);\n      }\n    }\n    setTimeout(() => setInClick(false), 200);\n  }\n\n  const createBoard = React.useCallback(() => {\n    const gameParams = () => {\n      switch (difficulty) {\n        case 'custom':\n          return customDifficultyParams;\n        case 'expert':\n          return [16, 30, 99];\n        case 'intermediate':\n          return [16, 16, 40];\n        case 'beginner':\n        default:\n          return [9, 9, 10];\n      }\n    }\n    const newGame = GenerateGameBoard(gameParams()[0], gameParams()[1], gameParams()[2]);\n    setWonGame(false);\n    setLostGame(false);\n    setStartedGame(false);\n    setTimer(0);\n    setMineFlagsRemaining(gameParams()[2]);\n    setNonMineCount(gameParams()[0] * gameParams()[1] - gameParams()[2])\n    setMineLocation(newGame.mineLocation);\n    setBoardGrid(newGame.board);\n  }, [customDifficultyParams, difficulty]);\n\n  React.useEffect(() => {\n    if (nonMineCount === 0) {\n      setWonGame(true);\n    }\n  }, [nonMineCount])\n\n  React.useEffect(() => {\n    if (wonGame) {\n      setShowPrompt(true);\n    }\n  }, [wonGame])\n\n  React.useEffect(() => {\n    createBoard();    \n  }, [createBoard, difficulty])\n\n  React.useEffect(() => {\n    const countUp = () => {\n      setTimer((time) => time + 0.0175);\n    }; \n    \n    if (lostGame || wonGame || timer > 998) {\n      clearTimeout(countUp);\n    } else if (startedGame) {\n      setTimeout(countUp, 10); \n    }\n\n    return () => {\n      clearTimeout(countUp);\n    }\n  }, [startedGame, lostGame, timer, wonGame])\n\n  return (\n    <div className=\"game-container\">\n      <div className={`board-wrapper ${zoomed ? 'board-wrapper__zoomed' : ''}`}>\n        <div className=\"board-header\">\n          <div className=\"number-display\">{mineFlagsRemaining >= 0 ? ('000' + mineFlagsRemaining).substr(-3) : '000'}</div>\n          <button onClick={createBoard}>{getFace()}</button>\n          <div className=\"number-display\">{('000' + Math.round(timer)).substr(-3)}</div>\n        </div>\n        <div className=\"board-container\" onClick={() => setStartedGame(true)}>\n          {boardGrid.map((gridRow, gridIdx) => (\n            <div className=\"board-row\" key={gridIdx}>\n              {gridRow.map((gridColumn, idx) => (\n                <Cell cellInfo={gridColumn} flagCell={flagCell} key={idx} lostGame={lostGame} revealAdjacent={revealAdjacent} revealCell={revealCell} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      <button className=\"interaction-button\" onClick={() => setShowModal(true)}>Open Menu</button>\n      <Modal close={() => setShowModal(false)} difficulty={difficulty} setCustomDifficultyParams={setCustomDifficultyParams} setDifficulty={setDifficulty} setZoomed={setZoomed} visible={showModal} zoomed={zoomed} />\n      <NamePrompt close={() => setShowPrompt(false)} difficulty={difficulty} setUpdatedBoard={setUpdatedBoard} timer={timer} visible={showPrompt} />\n    </div>\n  )\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}